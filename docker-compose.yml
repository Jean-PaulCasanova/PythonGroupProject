version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: flask_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flask Backend with Burger Products
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      FLASK_APP: app
      FLASK_ENV: development
      DATABASE_URL: postgresql://postgres:password@db:5432/flask_app
      SECRET_KEY: your-production-secret-key-here
      SCHEMA: flask_schema
      WTF_CSRF_ENABLED: "true"
      WTF_CSRF_TIME_LIMIT: "3600"
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/var/www
    command: >
      sh -c "flask db upgrade &&
             flask seed all &&
             echo 'Database seeded with burger products!' &&
             gunicorn app:app --bind 0.0.0.0:5000 --reload --workers 1 --timeout 120"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/csrf/debug"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./react-vite
      dockerfile: Dockerfile.dev
    environment:
      VITE_REACT_APP_BASE_URL: http://localhost:5000
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./react-vite:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0

  # Redis for Session Storage (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: flask-burger-app